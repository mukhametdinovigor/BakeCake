# Generated by Django 3.2.8 on 2021-10-26 17:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phonenumber', phonenumber_field.modelfields.PhoneNumberField(max_length=20, region=None, validators=[django.core.validators.MaxLengthValidator(12)], verbose_name='номер телефона')),
                ('address', models.CharField(max_length=100, verbose_name='адрес')),
                ('social_network_link', models.TextField(blank=True, null=True, verbose_name='ссылка на соцсеть')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'покупатель',
                'verbose_name_plural': 'покупатели',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdditionalIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='название')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='цена')),
            ],
            options={
                'verbose_name': 'дополнительный ингредиент',
                'verbose_name_plural': 'дополнительные ингредиенты',
            },
        ),
        migrations.CreateModel(
            name='Berry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='название')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='цена')),
            ],
            options={
                'verbose_name': 'ягода',
                'verbose_name_plural': 'ягоды',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levels_count', models.PositiveSmallIntegerField(verbose_name='число уровней')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='цена')),
            ],
            options={
                'verbose_name': 'число уровней',
                'verbose_name_plural': 'числа уровней',
            },
        ),
        migrations.CreateModel(
            name='Shape',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('figure', models.CharField(max_length=20, verbose_name='фигура')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='цена')),
            ],
            options={
                'verbose_name': 'форма',
                'verbose_name_plural': 'формы',
            },
        ),
        migrations.CreateModel(
            name='Topping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='название')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='цена')),
            ],
            options={
                'verbose_name': 'топпинг',
                'verbose_name_plural': 'топпинги',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Заявка обрабатывается'), ('COOKED', 'Торт готовится'), ('EN_ROUTE', 'Торт в пути'), ('COMPLETED', 'Выполнен'), ('CANCELED', 'Отменен')], db_index=True, default='PENDING', max_length=20, verbose_name='статус')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='создан в')),
                ('delivered_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='доставлен в')),
                ('delivery_time', models.DateTimeField(db_index=True, verbose_name='время доставки')),
                ('comment', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(300)], verbose_name='комментарий к заказу')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='цена')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='покупатель')),
            ],
            options={
                'verbose_name': 'заказ',
                'verbose_name_plural': 'заказы',
            },
        ),
        migrations.CreateModel(
            name='Cake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lettering', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(100)], verbose_name='подпись')),
                ('lettering_cost', models.FloatField(verbose_name='цена подписи')),
                ('additional_ingredient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cakes', to='cake.additionalingredient', verbose_name='дополнительные ингредиенты')),
                ('berry', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cakes', to='cake.berry', verbose_name='ягоды')),
                ('level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cakes', to='cake.level', verbose_name='число уровней')),
                ('shape', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cakes', to='cake.shape', verbose_name='форма')),
                ('topping', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cakes', to='cake.topping', verbose_name='топпинг')),
            ],
            options={
                'verbose_name': 'торт',
                'verbose_name_plural': 'торты',
            },
        ),
    ]
